/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * The activity level of a trade good. If the good is an import, this represents how strong consumption is. If the good is an export, this represents how strong the production is for the good. When activity is strong, consumption or production is near maximum capacity. When activity is weak, consumption or production is near minimum capacity.
 * @export
 * @enum {string}
 */

export const ActivityLevel = {
  Weak: "WEAK",
  Growing: "GROWING",
  Strong: "STRONG",
  Restricted: "RESTRICTED",
} as const;

export type ActivityLevel = (typeof ActivityLevel)[keyof typeof ActivityLevel];

/**
 * Agent details.
 * @export
 * @interface Agent
 */
export interface Agent {
  /**
   * Account ID that is tied to this agent. Only included on your own agent.
   * @type {string}
   * @memberof Agent
   */
  accountId?: string;
  /**
   * Symbol of the agent.
   * @type {string}
   * @memberof Agent
   */
  symbol: string;
  /**
   * The headquarters of the agent.
   * @type {string}
   * @memberof Agent
   */
  headquarters: string;
  /**
   * The number of credits the agent has available. Credits can be negative if funds have been overdrawn.
   * @type {number}
   * @memberof Agent
   */
  credits: number;
  /**
   * The faction the agent started with.
   * @type {string}
   * @memberof Agent
   */
  startingFaction: string;
  /**
   * How many ships are owned by the agent.
   * @type {number}
   * @memberof Agent
   */
  shipCount: number;
}
/**
 * The chart of a system or waypoint, which makes the location visible to other agents.
 * @export
 * @interface Chart
 */
export interface Chart {
  /**
   * The symbol of the waypoint.
   * @type {string}
   * @memberof Chart
   */
  waypointSymbol?: string;
  /**
   * The agent that submitted the chart for this waypoint.
   * @type {string}
   * @memberof Chart
   */
  submittedBy?: string;
  /**
   * The time the chart for this waypoint was submitted.
   * @type {string}
   * @memberof Chart
   */
  submittedOn?: string;
}
/**
 * The construction details of a waypoint.
 * @export
 * @interface Construction
 */
export interface Construction {
  /**
   * The symbol of the waypoint.
   * @type {string}
   * @memberof Construction
   */
  symbol: string;
  /**
   * The materials required to construct the waypoint.
   * @type {Array<ConstructionMaterial>}
   * @memberof Construction
   */
  materials: Array<ConstructionMaterial>;
  /**
   * Whether the waypoint has been constructed.
   * @type {boolean}
   * @memberof Construction
   */
  isComplete: boolean;
}
/**
 * The details of the required construction materials for a given waypoint under construction.
 * @export
 * @interface ConstructionMaterial
 */
export interface ConstructionMaterial {
  /**
   *
   * @type {TradeSymbol}
   * @memberof ConstructionMaterial
   */
  tradeSymbol: TradeSymbol;
  /**
   * The number of units required.
   * @type {number}
   * @memberof ConstructionMaterial
   */
  required: number;
  /**
   * The number of units fulfilled toward the required amount.
   * @type {number}
   * @memberof ConstructionMaterial
   */
  fulfilled: number;
}

/**
 * Contract details.
 * @export
 * @interface Contract
 */
export interface Contract {
  /**
   * ID of the contract.
   * @type {string}
   * @memberof Contract
   */
  id: string;
  /**
   * The symbol of the faction that this contract is for.
   * @type {string}
   * @memberof Contract
   */
  factionSymbol: string;
  /**
   * Type of contract.
   * @type {string}
   * @memberof Contract
   */
  type: ContractTypeEnum;
  /**
   *
   * @type {ContractTerms}
   * @memberof Contract
   */
  terms: ContractTerms;
  /**
   * Whether the contract has been accepted by the agent
   * @type {boolean}
   * @memberof Contract
   */
  accepted: boolean;
  /**
   * Whether the contract has been fulfilled
   * @type {boolean}
   * @memberof Contract
   */
  fulfilled: boolean;
  /**
   * Deprecated in favor of deadlineToAccept
   * @type {string}
   * @memberof Contract
   * @deprecated
   */
  expiration: string;
  /**
   * The time at which the contract is no longer available to be accepted
   * @type {string}
   * @memberof Contract
   */
  deadlineToAccept?: string;
}

export const ContractTypeEnum = {
  Procurement: "PROCUREMENT",
  Transport: "TRANSPORT",
  Shuttle: "SHUTTLE",
} as const;

export type ContractTypeEnum =
  (typeof ContractTypeEnum)[keyof typeof ContractTypeEnum];

/**
 * The details of a delivery contract. Includes the type of good, units needed, and the destination.
 * @export
 * @interface ContractDeliverGood
 */
export interface ContractDeliverGood {
  /**
   * The symbol of the trade good to deliver.
   * @type {string}
   * @memberof ContractDeliverGood
   */
  tradeSymbol: string;
  /**
   * The destination where goods need to be delivered.
   * @type {string}
   * @memberof ContractDeliverGood
   */
  destinationSymbol: string;
  /**
   * The number of units that need to be delivered on this contract.
   * @type {number}
   * @memberof ContractDeliverGood
   */
  unitsRequired: number;
  /**
   * The number of units fulfilled on this contract.
   * @type {number}
   * @memberof ContractDeliverGood
   */
  unitsFulfilled: number;
}
/**
 * Payments for the contract.
 * @export
 * @interface ContractPayment
 */
export interface ContractPayment {
  /**
   * The amount of credits received up front for accepting the contract.
   * @type {number}
   * @memberof ContractPayment
   */
  onAccepted: number;
  /**
   * The amount of credits received when the contract is fulfilled.
   * @type {number}
   * @memberof ContractPayment
   */
  onFulfilled: number;
}
/**
 * The terms to fulfill the contract.
 * @export
 * @interface ContractTerms
 */
export interface ContractTerms {
  /**
   * The deadline for the contract.
   * @type {string}
   * @memberof ContractTerms
   */
  deadline: string;
  /**
   *
   * @type {ContractPayment}
   * @memberof ContractTerms
   */
  payment: ContractPayment;
  /**
   * The cargo that needs to be delivered to fulfill the contract.
   * @type {Array<ContractDeliverGood>}
   * @memberof ContractTerms
   */
  deliver?: Array<ContractDeliverGood>;
}
/**
 * A cooldown is a period of time in which a ship cannot perform certain actions.
 * @export
 * @interface Cooldown
 */
export interface Cooldown {
  /**
   * The symbol of the ship that is on cooldown
   * @type {string}
   * @memberof Cooldown
   */
  shipSymbol: string;
  /**
   * The total duration of the cooldown in seconds
   * @type {number}
   * @memberof Cooldown
   */
  totalSeconds: number;
  /**
   * The remaining duration of the cooldown in seconds
   * @type {number}
   * @memberof Cooldown
   */
  remainingSeconds: number;
  /**
   * The date and time when the cooldown expires in ISO 8601 format
   * @type {string}
   * @memberof Cooldown
   */
  expiration?: string;
}

/**
 * A yield from the extraction operation.
 * @export
 * @interface ExtractionYield
 */
export interface ExtractionYield {
  /**
   *
   * @type {TradeSymbol}
   * @memberof ExtractionYield
   */
  symbol: TradeSymbol;
  /**
   * The number of units extracted that were placed into the ship\'s cargo hold.
   * @type {number}
   * @memberof ExtractionYield
   */
  units: number;
}

/**
 * Faction details.
 * @export
 * @interface Faction
 */
export interface Faction {
  /**
   *
   * @type {FactionSymbol}
   * @memberof Faction
   */
  symbol: FactionSymbol;
  /**
   * Name of the faction.
   * @type {string}
   * @memberof Faction
   */
  name: string;
  /**
   * Description of the faction.
   * @type {string}
   * @memberof Faction
   */
  description: string;
  /**
   * The waypoint in which the faction\'s HQ is located in.
   * @type {string}
   * @memberof Faction
   */
  headquarters: string;
  /**
   * List of traits that define this faction.
   * @type {Array<FactionTrait>}
   * @memberof Faction
   */
  traits: Array<FactionTrait>;
  /**
   * Whether or not the faction is currently recruiting new agents.
   * @type {boolean}
   * @memberof Faction
   */
  isRecruiting: boolean;
}

/**
 * The symbol of the faction.
 * @export
 * @enum {string}
 */

export const FactionSymbol = {
  Cosmic: "COSMIC",
  Void: "VOID",
  Galactic: "GALACTIC",
  Quantum: "QUANTUM",
  Dominion: "DOMINION",
  Astro: "ASTRO",
  Corsairs: "CORSAIRS",
  Obsidian: "OBSIDIAN",
  Aegis: "AEGIS",
  United: "UNITED",
  Solitary: "SOLITARY",
  Cobalt: "COBALT",
  Omega: "OMEGA",
  Echo: "ECHO",
  Lords: "LORDS",
  Cult: "CULT",
  Ancients: "ANCIENTS",
  Shadow: "SHADOW",
  Ethereal: "ETHEREAL",
} as const;

export type FactionSymbol = (typeof FactionSymbol)[keyof typeof FactionSymbol];

/**
 *
 * @export
 * @interface FactionTrait
 */
export interface FactionTrait {
  /**
   *
   * @type {FactionTraitSymbol}
   * @memberof FactionTrait
   */
  symbol: FactionTraitSymbol;
  /**
   * The name of the trait.
   * @type {string}
   * @memberof FactionTrait
   */
  name: string;
  /**
   * A description of the trait.
   * @type {string}
   * @memberof FactionTrait
   */
  description: string;
}

/**
 * The unique identifier of the trait.
 * @export
 * @enum {string}
 */

export const FactionTraitSymbol = {
  Bureaucratic: "BUREAUCRATIC",
  Secretive: "SECRETIVE",
  Capitalistic: "CAPITALISTIC",
  Industrious: "INDUSTRIOUS",
  Peaceful: "PEACEFUL",
  Distrustful: "DISTRUSTFUL",
  Welcoming: "WELCOMING",
  Smugglers: "SMUGGLERS",
  Scavengers: "SCAVENGERS",
  Rebellious: "REBELLIOUS",
  Exiles: "EXILES",
  Pirates: "PIRATES",
  Raiders: "RAIDERS",
  Clan: "CLAN",
  Guild: "GUILD",
  Dominion: "DOMINION",
  Fringe: "FRINGE",
  Forsaken: "FORSAKEN",
  Isolated: "ISOLATED",
  Localized: "LOCALIZED",
  Established: "ESTABLISHED",
  Notable: "NOTABLE",
  Dominant: "DOMINANT",
  Inescapable: "INESCAPABLE",
  Innovative: "INNOVATIVE",
  Bold: "BOLD",
  Visionary: "VISIONARY",
  Curious: "CURIOUS",
  Daring: "DARING",
  Exploratory: "EXPLORATORY",
  Resourceful: "RESOURCEFUL",
  Flexible: "FLEXIBLE",
  Cooperative: "COOPERATIVE",
  United: "UNITED",
  Strategic: "STRATEGIC",
  Intelligent: "INTELLIGENT",
  ResearchFocused: "RESEARCH_FOCUSED",
  Collaborative: "COLLABORATIVE",
  Progressive: "PROGRESSIVE",
  Militaristic: "MILITARISTIC",
  TechnologicallyAdvanced: "TECHNOLOGICALLY_ADVANCED",
  Aggressive: "AGGRESSIVE",
  Imperialistic: "IMPERIALISTIC",
  TreasureHunters: "TREASURE_HUNTERS",
  Dexterous: "DEXTEROUS",
  Unpredictable: "UNPREDICTABLE",
  Brutal: "BRUTAL",
  Fleeting: "FLEETING",
  Adaptable: "ADAPTABLE",
  SelfSufficient: "SELF_SUFFICIENT",
  Defensive: "DEFENSIVE",
  Proud: "PROUD",
  Diverse: "DIVERSE",
  Independent: "INDEPENDENT",
  SelfInterested: "SELF_INTERESTED",
  Fragmented: "FRAGMENTED",
  Commercial: "COMMERCIAL",
  FreeMarkets: "FREE_MARKETS",
  Entrepreneurial: "ENTREPRENEURIAL",
} as const;

export type FactionTraitSymbol =
  (typeof FactionTraitSymbol)[keyof typeof FactionTraitSymbol];

/**
 * @type GetSystemWaypointsTraitsParameter
 * @export
 */
export type GetSystemWaypointsTraitsParameter =
  | Array<WaypointTraitSymbol>
  | WaypointTraitSymbol;

/**
 *
 * @export
 * @interface JumpGate
 */
export interface JumpGate {
  /**
   * The symbol of the waypoint.
   * @type {string}
   * @memberof JumpGate
   */
  symbol: string;
  /**
   * All the gates that are connected to this waypoint.
   * @type {Array<string>}
   * @memberof JumpGate
   */
  connections: Array<string>;
}

/**
 *
 * @export
 * @interface Market
 */
export interface Market {
  /**
   * The symbol of the market. The symbol is the same as the waypoint where the market is located.
   * @type {string}
   * @memberof Market
   */
  symbol: string;
  /**
   * The list of goods that are exported from this market.
   * @type {Array<TradeGood>}
   * @memberof Market
   */
  exports: Array<TradeGood>;
  /**
   * The list of goods that are sought as imports in this market.
   * @type {Array<TradeGood>}
   * @memberof Market
   */
  imports: Array<TradeGood>;
  /**
   * The list of goods that are bought and sold between agents at this market.
   * @type {Array<TradeGood>}
   * @memberof Market
   */
  exchange: Array<TradeGood>;
  /**
   * The list of recent transactions at this market. Visible only when a ship is present at the market.
   * @type {Array<MarketTransaction>}
   * @memberof Market
   */
  transactions?: Array<MarketTransaction>;
  /**
   * The list of goods that are traded at this market. Visible only when a ship is present at the market.
   * @type {Array<MarketTradeGood>}
   * @memberof Market
   */
  tradeGoods?: Array<MarketTradeGood>;
}
/**
 *
 * @export
 * @interface MarketTradeGood
 */
export interface MarketTradeGood {
  /**
   *
   * @type {TradeSymbol}
   * @memberof MarketTradeGood
   */
  symbol: TradeSymbol;
  /**
   * The type of trade good (export, import, or exchange).
   * @type {string}
   * @memberof MarketTradeGood
   */
  type: MarketTradeGoodTypeEnum;
  /**
   * This is the maximum number of units that can be purchased or sold at this market in a single trade for this good. Trade volume also gives an indication of price volatility. A market with a low trade volume will have large price swings, while high trade volume will be more resilient to price changes.
   * @type {number}
   * @memberof MarketTradeGood
   */
  tradeVolume: number;
  /**
   *
   * @type {SupplyLevel}
   * @memberof MarketTradeGood
   */
  supply: SupplyLevel;
  /**
   *
   * @type {ActivityLevel}
   * @memberof MarketTradeGood
   */
  activity?: ActivityLevel;
  /**
   * The price at which this good can be purchased from the market.
   * @type {number}
   * @memberof MarketTradeGood
   */
  purchasePrice: number;
  /**
   * The price at which this good can be sold to the market.
   * @type {number}
   * @memberof MarketTradeGood
   */
  sellPrice: number;
}

export const MarketTradeGoodTypeEnum = {
  Export: "EXPORT",
  Import: "IMPORT",
  Exchange: "EXCHANGE",
} as const;

export type MarketTradeGoodTypeEnum =
  (typeof MarketTradeGoodTypeEnum)[keyof typeof MarketTradeGoodTypeEnum];

/**
 * Result of a transaction with a market.
 * @export
 * @interface MarketTransaction
 */
export interface MarketTransaction {
  /**
   * The symbol of the waypoint.
   * @type {string}
   * @memberof MarketTransaction
   */
  waypointSymbol: string;
  /**
   * The symbol of the ship that made the transaction.
   * @type {string}
   * @memberof MarketTransaction
   */
  shipSymbol: string;
  /**
   * The symbol of the trade good.
   * @type {string}
   * @memberof MarketTransaction
   */
  tradeSymbol: string;
  /**
   * The type of transaction.
   * @type {string}
   * @memberof MarketTransaction
   */
  type: MarketTransactionTypeEnum;
  /**
   * The number of units of the transaction.
   * @type {number}
   * @memberof MarketTransaction
   */
  units: number;
  /**
   * The price per unit of the transaction.
   * @type {number}
   * @memberof MarketTransaction
   */
  pricePerUnit: number;
  /**
   * The total price of the transaction.
   * @type {number}
   * @memberof MarketTransaction
   */
  totalPrice: number;
  /**
   * The timestamp of the transaction.
   * @type {string}
   * @memberof MarketTransaction
   */
  timestamp: string;
}

export const MarketTransactionTypeEnum = {
  Purchase: "PURCHASE",
  Sell: "SELL",
} as const;

export type MarketTransactionTypeEnum =
  (typeof MarketTransactionTypeEnum)[keyof typeof MarketTransactionTypeEnum];

/**
 * Meta details for pagination.
 * @export
 * @interface Meta
 */
export interface Meta {
  /**
   * Shows the total amount of items of this kind that exist.
   * @type {number}
   * @memberof Meta
   */
  total: number;
  /**
   * A page denotes an amount of items, offset from the first item. Each page holds an amount of items equal to the `limit`.
   * @type {number}
   * @memberof Meta
   */
  page: number;
  /**
   * The amount of items in each page. Limits how many items can be fetched at once.
   * @type {number}
   * @memberof Meta
   */
  limit: number;
}

/**
 * Result of a repair transaction.
 * @export
 * @interface RepairTransaction
 */
export interface RepairTransaction {
  /**
   * The symbol of the waypoint.
   * @type {string}
   * @memberof RepairTransaction
   */
  waypointSymbol: string;
  /**
   * The symbol of the ship.
   * @type {string}
   * @memberof RepairTransaction
   */
  shipSymbol: string;
  /**
   * The total price of the transaction.
   * @type {number}
   * @memberof RepairTransaction
   */
  totalPrice: number;
  /**
   * The timestamp of the transaction.
   * @type {string}
   * @memberof RepairTransaction
   */
  timestamp: string;
}
/**
 * The ship that was scanned. Details include information about the ship that could be detected by the scanner.
 * @export
 * @interface ScannedShip
 */
export interface ScannedShip {
  /**
   * The globally unique identifier of the ship.
   * @type {string}
   * @memberof ScannedShip
   */
  symbol: string;
  /**
   *
   * @type {ShipRegistration}
   * @memberof ScannedShip
   */
  registration: ShipRegistration;
  /**
   *
   * @type {ShipNav}
   * @memberof ScannedShip
   */
  nav: ShipNav;
  /**
   *
   * @type {ScannedShipFrame}
   * @memberof ScannedShip
   */
  frame?: ScannedShipFrame;
  /**
   *
   * @type {ScannedShipReactor}
   * @memberof ScannedShip
   */
  reactor?: ScannedShipReactor;
  /**
   *
   * @type {ScannedShipEngine}
   * @memberof ScannedShip
   */
  engine: ScannedShipEngine;
  /**
   * List of mounts installed in the ship.
   * @type {Array<ScannedShipMountsInner>}
   * @memberof ScannedShip
   */
  mounts?: Array<ScannedShipMountsInner>;
}
/**
 * The engine of the ship.
 * @export
 * @interface ScannedShipEngine
 */
export interface ScannedShipEngine {
  /**
   * The symbol of the engine.
   * @type {string}
   * @memberof ScannedShipEngine
   */
  symbol: string;
}
/**
 * The frame of the ship.
 * @export
 * @interface ScannedShipFrame
 */
export interface ScannedShipFrame {
  /**
   * The symbol of the frame.
   * @type {string}
   * @memberof ScannedShipFrame
   */
  symbol: string;
}
/**
 * A mount on the ship.
 * @export
 * @interface ScannedShipMountsInner
 */
export interface ScannedShipMountsInner {
  /**
   * The symbol of the mount.
   * @type {string}
   * @memberof ScannedShipMountsInner
   */
  symbol: string;
}
/**
 * The reactor of the ship.
 * @export
 * @interface ScannedShipReactor
 */
export interface ScannedShipReactor {
  /**
   * The symbol of the reactor.
   * @type {string}
   * @memberof ScannedShipReactor
   */
  symbol: string;
}
/**
 * Details of a system was that scanned.
 * @export
 * @interface ScannedSystem
 */
export interface ScannedSystem {
  /**
   * Symbol of the system.
   * @type {string}
   * @memberof ScannedSystem
   */
  symbol: string;
  /**
   * Symbol of the system\'s sector.
   * @type {string}
   * @memberof ScannedSystem
   */
  sectorSymbol: string;
  /**
   *
   * @type {SystemType}
   * @memberof ScannedSystem
   */
  type: SystemType;
  /**
   * Position in the universe in the x axis.
   * @type {number}
   * @memberof ScannedSystem
   */
  x: number;
  /**
   * Position in the universe in the y axis.
   * @type {number}
   * @memberof ScannedSystem
   */
  y: number;
  /**
   * The system\'s distance from the scanning ship.
   * @type {number}
   * @memberof ScannedSystem
   */
  distance: number;
}

/**
 * A waypoint that was scanned by a ship.
 * @export
 * @interface ScannedWaypoint
 */
export interface ScannedWaypoint {
  /**
   * The symbol of the waypoint.
   * @type {string}
   * @memberof ScannedWaypoint
   */
  symbol: string;
  /**
   *
   * @type {WaypointType}
   * @memberof ScannedWaypoint
   */
  type: WaypointType;
  /**
   * The symbol of the system.
   * @type {string}
   * @memberof ScannedWaypoint
   */
  systemSymbol: string;
  /**
   * Position in the universe in the x axis.
   * @type {number}
   * @memberof ScannedWaypoint
   */
  x: number;
  /**
   * Position in the universe in the y axis.
   * @type {number}
   * @memberof ScannedWaypoint
   */
  y: number;
  /**
   * List of waypoints that orbit this waypoint.
   * @type {Array<WaypointOrbital>}
   * @memberof ScannedWaypoint
   */
  orbitals: Array<WaypointOrbital>;
  /**
   *
   * @type {WaypointFaction}
   * @memberof ScannedWaypoint
   */
  faction?: WaypointFaction;
  /**
   * The traits of the waypoint.
   * @type {Array<WaypointTrait>}
   * @memberof ScannedWaypoint
   */
  traits: Array<WaypointTrait>;
  /**
   *
   * @type {Chart}
   * @memberof ScannedWaypoint
   */
  chart?: Chart;
}

/**
 * Result of a scrap transaction.
 * @export
 * @interface ScrapTransaction
 */
export interface ScrapTransaction {
  /**
   * The symbol of the waypoint.
   * @type {string}
   * @memberof ScrapTransaction
   */
  waypointSymbol: string;
  /**
   * The symbol of the ship.
   * @type {string}
   * @memberof ScrapTransaction
   */
  shipSymbol: string;
  /**
   * The total price of the transaction.
   * @type {number}
   * @memberof ScrapTransaction
   */
  totalPrice: number;
  /**
   * The timestamp of the transaction.
   * @type {string}
   * @memberof ScrapTransaction
   */
  timestamp: string;
}

/**
 * Ship details.
 * @export
 * @interface Ship
 */
export interface Ship {
  /**
   * The globally unique identifier of the ship in the following format: `[AGENT_SYMBOL]-[HEX_ID]`
   * @type {string}
   * @memberof Ship
   */
  symbol: string;
  /**
   *
   * @type {ShipRegistration}
   * @memberof Ship
   */
  registration: ShipRegistration;
  /**
   *
   * @type {ShipNav}
   * @memberof Ship
   */
  nav: ShipNav;
  /**
   *
   * @type {ShipCrew}
   * @memberof Ship
   */
  crew: ShipCrew;
  /**
   *
   * @type {ShipFrame}
   * @memberof Ship
   */
  frame: ShipFrame;
  /**
   *
   * @type {ShipReactor}
   * @memberof Ship
   */
  reactor: ShipReactor;
  /**
   *
   * @type {ShipEngine}
   * @memberof Ship
   */
  engine: ShipEngine;
  /**
   *
   * @type {Cooldown}
   * @memberof Ship
   */
  cooldown: Cooldown;
  /**
   * Modules installed in this ship.
   * @type {Array<ShipModule>}
   * @memberof Ship
   */
  modules: Array<ShipModule>;
  /**
   * Mounts installed in this ship.
   * @type {Array<ShipMount>}
   * @memberof Ship
   */
  mounts: Array<ShipMount>;
  /**
   *
   * @type {ShipCargo}
   * @memberof Ship
   */
  cargo: ShipCargo;
  /**
   *
   * @type {ShipFuel}
   * @memberof Ship
   */
  fuel: ShipFuel;
}
/**
 * Ship cargo details.
 * @export
 * @interface ShipCargo
 */
export interface ShipCargo {
  /**
   * The max number of items that can be stored in the cargo hold.
   * @type {number}
   * @memberof ShipCargo
   */
  capacity: number;
  /**
   * The number of items currently stored in the cargo hold.
   * @type {number}
   * @memberof ShipCargo
   */
  units: number;
  /**
   * The items currently in the cargo hold.
   * @type {Array<ShipCargoItem>}
   * @memberof ShipCargo
   */
  inventory: Array<ShipCargoItem>;
}
/**
 * The type of cargo item and the number of units.
 * @export
 * @interface ShipCargoItem
 */
export interface ShipCargoItem {
  /**
   *
   * @type {TradeSymbol}
   * @memberof ShipCargoItem
   */
  symbol: TradeSymbol;
  /**
   * The name of the cargo item type.
   * @type {string}
   * @memberof ShipCargoItem
   */
  name: string;
  /**
   * The description of the cargo item type.
   * @type {string}
   * @memberof ShipCargoItem
   */
  description: string;
  /**
   * The number of units of the cargo item.
   * @type {number}
   * @memberof ShipCargoItem
   */
  units: number;
}

/**
 * An event that represents damage or wear to a ship\'s reactor, frame, or engine, reducing the condition of the ship.
 * @export
 * @interface ShipConditionEvent
 */
export interface ShipConditionEvent {
  /**
   *
   * @type {string}
   * @memberof ShipConditionEvent
   */
  symbol: ShipConditionEventSymbolEnum;
  /**
   *
   * @type {string}
   * @memberof ShipConditionEvent
   */
  component: ShipConditionEventComponentEnum;
  /**
   * The name of the event.
   * @type {string}
   * @memberof ShipConditionEvent
   */
  name: string;
  /**
   * A description of the event.
   * @type {string}
   * @memberof ShipConditionEvent
   */
  description: string;
}

export const ShipConditionEventSymbolEnum = {
  ReactorOverload: "REACTOR_OVERLOAD",
  EnergySpikeFromMineral: "ENERGY_SPIKE_FROM_MINERAL",
  SolarFlareInterference: "SOLAR_FLARE_INTERFERENCE",
  CoolantLeak: "COOLANT_LEAK",
  PowerDistributionFluctuation: "POWER_DISTRIBUTION_FLUCTUATION",
  MagneticFieldDisruption: "MAGNETIC_FIELD_DISRUPTION",
  HullMicrometeoriteStrikes: "HULL_MICROMETEORITE_STRIKES",
  StructuralStressFractures: "STRUCTURAL_STRESS_FRACTURES",
  CorrosiveMineralContamination: "CORROSIVE_MINERAL_CONTAMINATION",
  ThermalExpansionMismatch: "THERMAL_EXPANSION_MISMATCH",
  VibrationDamageFromDrilling: "VIBRATION_DAMAGE_FROM_DRILLING",
  ElectromagneticFieldInterference: "ELECTROMAGNETIC_FIELD_INTERFERENCE",
  ImpactWithExtractedDebris: "IMPACT_WITH_EXTRACTED_DEBRIS",
  FuelEfficiencyDegradation: "FUEL_EFFICIENCY_DEGRADATION",
  CoolantSystemAgeing: "COOLANT_SYSTEM_AGEING",
  DustMicroabrasions: "DUST_MICROABRASIONS",
  ThrusterNozzleWear: "THRUSTER_NOZZLE_WEAR",
  ExhaustPortClogging: "EXHAUST_PORT_CLOGGING",
  BearingLubricationFade: "BEARING_LUBRICATION_FADE",
  SensorCalibrationDrift: "SENSOR_CALIBRATION_DRIFT",
  HullMicrometeoriteDamage: "HULL_MICROMETEORITE_DAMAGE",
  SpaceDebrisCollision: "SPACE_DEBRIS_COLLISION",
  ThermalStress: "THERMAL_STRESS",
  VibrationOverload: "VIBRATION_OVERLOAD",
  PressureDifferentialStress: "PRESSURE_DIFFERENTIAL_STRESS",
  ElectromagneticSurgeEffects: "ELECTROMAGNETIC_SURGE_EFFECTS",
  AtmosphericEntryHeat: "ATMOSPHERIC_ENTRY_HEAT",
} as const;

export type ShipConditionEventSymbolEnum =
  (typeof ShipConditionEventSymbolEnum)[keyof typeof ShipConditionEventSymbolEnum];
export const ShipConditionEventComponentEnum = {
  Frame: "FRAME",
  Reactor: "REACTOR",
  Engine: "ENGINE",
} as const;

export type ShipConditionEventComponentEnum =
  (typeof ShipConditionEventComponentEnum)[keyof typeof ShipConditionEventComponentEnum];

/**
 * The ship\'s crew service and maintain the ship\'s systems and equipment.
 * @export
 * @interface ShipCrew
 */
export interface ShipCrew {
  /**
   * The current number of crew members on the ship.
   * @type {number}
   * @memberof ShipCrew
   */
  current: number;
  /**
   * The minimum number of crew members required to maintain the ship.
   * @type {number}
   * @memberof ShipCrew
   */
  required: number;
  /**
   * The maximum number of crew members the ship can support.
   * @type {number}
   * @memberof ShipCrew
   */
  capacity: number;
  /**
   * The rotation of crew shifts. A stricter shift improves the ship\'s performance. A more relaxed shift improves the crew\'s morale.
   * @type {string}
   * @memberof ShipCrew
   */
  rotation: ShipCrewRotationEnum;
  /**
   * A rough measure of the crew\'s morale. A higher morale means the crew is happier and more productive. A lower morale means the ship is more prone to accidents.
   * @type {number}
   * @memberof ShipCrew
   */
  morale: number;
  /**
   * The amount of credits per crew member paid per hour. Wages are paid when a ship docks at a civilized waypoint.
   * @type {number}
   * @memberof ShipCrew
   */
  wages: number;
}

export const ShipCrewRotationEnum = {
  Strict: "STRICT",
  Relaxed: "RELAXED",
} as const;

export type ShipCrewRotationEnum =
  (typeof ShipCrewRotationEnum)[keyof typeof ShipCrewRotationEnum];

/**
 * The engine determines how quickly a ship travels between waypoints.
 * @export
 * @interface ShipEngine
 */
export interface ShipEngine {
  /**
   * The symbol of the engine.
   * @type {string}
   * @memberof ShipEngine
   */
  symbol: ShipEngineSymbolEnum;
  /**
   * The name of the engine.
   * @type {string}
   * @memberof ShipEngine
   */
  name: string;
  /**
   * The description of the engine.
   * @type {string}
   * @memberof ShipEngine
   */
  description: string;
  /**
   * The repairable condition of a component. A value of 0 indicates the component needs significant repairs, while a value of 1 indicates the component is in near perfect condition. As the condition of a component is repaired, the overall integrity of the component decreases.
   * @type {number}
   * @memberof ShipEngine
   */
  condition: number;
  /**
   * The overall integrity of the component, which determines the performance of the component. A value of 0 indicates that the component is almost completely degraded, while a value of 1 indicates that the component is in near perfect condition. The integrity of the component is non-repairable, and represents permanent wear over time.
   * @type {number}
   * @memberof ShipEngine
   */
  integrity: number;
  /**
   * The speed stat of this engine. The higher the speed, the faster a ship can travel from one point to another. Reduces the time of arrival when navigating the ship.
   * @type {number}
   * @memberof ShipEngine
   */
  speed: number;
  /**
   *
   * @type {ShipRequirements}
   * @memberof ShipEngine
   */
  requirements: ShipRequirements;
}

export const ShipEngineSymbolEnum = {
  ImpulseDriveI: "ENGINE_IMPULSE_DRIVE_I",
  IonDriveI: "ENGINE_ION_DRIVE_I",
  IonDriveIi: "ENGINE_ION_DRIVE_II",
  HyperDriveI: "ENGINE_HYPER_DRIVE_I",
} as const;

export type ShipEngineSymbolEnum =
  (typeof ShipEngineSymbolEnum)[keyof typeof ShipEngineSymbolEnum];

/**
 * The frame of the ship. The frame determines the number of modules and mounting points of the ship, as well as base fuel capacity. As the condition of the frame takes more wear, the ship will become more sluggish and less maneuverable.
 * @export
 * @interface ShipFrame
 */
export interface ShipFrame {
  /**
   * Symbol of the frame.
   * @type {string}
   * @memberof ShipFrame
   */
  symbol: ShipFrameSymbolEnum;
  /**
   * Name of the frame.
   * @type {string}
   * @memberof ShipFrame
   */
  name: string;
  /**
   * Description of the frame.
   * @type {string}
   * @memberof ShipFrame
   */
  description: string;
  /**
   * The repairable condition of a component. A value of 0 indicates the component needs significant repairs, while a value of 1 indicates the component is in near perfect condition. As the condition of a component is repaired, the overall integrity of the component decreases.
   * @type {number}
   * @memberof ShipFrame
   */
  condition: number;
  /**
   * The overall integrity of the component, which determines the performance of the component. A value of 0 indicates that the component is almost completely degraded, while a value of 1 indicates that the component is in near perfect condition. The integrity of the component is non-repairable, and represents permanent wear over time.
   * @type {number}
   * @memberof ShipFrame
   */
  integrity: number;
  /**
   * The amount of slots that can be dedicated to modules installed in the ship. Each installed module take up a number of slots, and once there are no more slots, no new modules can be installed.
   * @type {number}
   * @memberof ShipFrame
   */
  moduleSlots: number;
  /**
   * The amount of slots that can be dedicated to mounts installed in the ship. Each installed mount takes up a number of points, and once there are no more points remaining, no new mounts can be installed.
   * @type {number}
   * @memberof ShipFrame
   */
  mountingPoints: number;
  /**
   * The maximum amount of fuel that can be stored in this ship. When refueling, the ship will be refueled to this amount.
   * @type {number}
   * @memberof ShipFrame
   */
  fuelCapacity: number;
  /**
   *
   * @type {ShipRequirements}
   * @memberof ShipFrame
   */
  requirements: ShipRequirements;
}

export const ShipFrameSymbolEnum = {
  Probe: "FRAME_PROBE",
  Drone: "FRAME_DRONE",
  Interceptor: "FRAME_INTERCEPTOR",
  Racer: "FRAME_RACER",
  Fighter: "FRAME_FIGHTER",
  Frigate: "FRAME_FRIGATE",
  Shuttle: "FRAME_SHUTTLE",
  Explorer: "FRAME_EXPLORER",
  Miner: "FRAME_MINER",
  LightFreighter: "FRAME_LIGHT_FREIGHTER",
  HeavyFreighter: "FRAME_HEAVY_FREIGHTER",
  Transport: "FRAME_TRANSPORT",
  Destroyer: "FRAME_DESTROYER",
  Cruiser: "FRAME_CRUISER",
  Carrier: "FRAME_CARRIER",
} as const;

export type ShipFrameSymbolEnum =
  (typeof ShipFrameSymbolEnum)[keyof typeof ShipFrameSymbolEnum];

/**
 * Details of the ship\'s fuel tanks including how much fuel was consumed during the last transit or action.
 * @export
 * @interface ShipFuel
 */
export interface ShipFuel {
  /**
   * The current amount of fuel in the ship\'s tanks.
   * @type {number}
   * @memberof ShipFuel
   */
  current: number;
  /**
   * The maximum amount of fuel the ship\'s tanks can hold.
   * @type {number}
   * @memberof ShipFuel
   */
  capacity: number;
  /**
   *
   * @type {ShipFuelConsumed}
   * @memberof ShipFuel
   */
  consumed?: ShipFuelConsumed;
}
/**
 * An object that only shows up when an action has consumed fuel in the process. Shows the fuel consumption data.
 * @export
 * @interface ShipFuelConsumed
 */
export interface ShipFuelConsumed {
  /**
   * The amount of fuel consumed by the most recent transit or action.
   * @type {number}
   * @memberof ShipFuelConsumed
   */
  amount: number;
  /**
   * The time at which the fuel was consumed.
   * @type {string}
   * @memberof ShipFuelConsumed
   */
  timestamp: string;
}
/**
 * Result of a transaction for a ship modification, such as installing a mount or a module.
 * @export
 * @interface ShipModificationTransaction
 */
export interface ShipModificationTransaction {
  /**
   * The symbol of the waypoint where the transaction took place.
   * @type {string}
   * @memberof ShipModificationTransaction
   */
  waypointSymbol: string;
  /**
   * The symbol of the ship that made the transaction.
   * @type {string}
   * @memberof ShipModificationTransaction
   */
  shipSymbol: string;
  /**
   * The symbol of the trade good.
   * @type {string}
   * @memberof ShipModificationTransaction
   */
  tradeSymbol: string;
  /**
   * The total price of the transaction.
   * @type {number}
   * @memberof ShipModificationTransaction
   */
  totalPrice: number;
  /**
   * The timestamp of the transaction.
   * @type {string}
   * @memberof ShipModificationTransaction
   */
  timestamp: string;
}
/**
 * A module can be installed in a ship and provides a set of capabilities such as storage space or quarters for crew. Module installations are permanent.
 * @export
 * @interface ShipModule
 */
export interface ShipModule {
  /**
   * The symbol of the module.
   * @type {string}
   * @memberof ShipModule
   */
  symbol: ShipModuleSymbolEnum;
  /**
   * Modules that provide capacity, such as cargo hold or crew quarters will show this value to denote how much of a bonus the module grants.
   * @type {number}
   * @memberof ShipModule
   */
  capacity?: number;
  /**
   * Modules that have a range will such as a sensor array show this value to denote how far can the module reach with its capabilities.
   * @type {number}
   * @memberof ShipModule
   */
  range?: number;
  /**
   * Name of this module.
   * @type {string}
   * @memberof ShipModule
   */
  name: string;
  /**
   * Description of this module.
   * @type {string}
   * @memberof ShipModule
   */
  description: string;
  /**
   *
   * @type {ShipRequirements}
   * @memberof ShipModule
   */
  requirements: ShipRequirements;
}

export const ShipModuleSymbolEnum = {
  MineralProcessorI: "MODULE_MINERAL_PROCESSOR_I",
  GasProcessorI: "MODULE_GAS_PROCESSOR_I",
  CargoHoldI: "MODULE_CARGO_HOLD_I",
  CargoHoldIi: "MODULE_CARGO_HOLD_II",
  CargoHoldIii: "MODULE_CARGO_HOLD_III",
  CrewQuartersI: "MODULE_CREW_QUARTERS_I",
  EnvoyQuartersI: "MODULE_ENVOY_QUARTERS_I",
  PassengerCabinI: "MODULE_PASSENGER_CABIN_I",
  MicroRefineryI: "MODULE_MICRO_REFINERY_I",
  OreRefineryI: "MODULE_ORE_REFINERY_I",
  FuelRefineryI: "MODULE_FUEL_REFINERY_I",
  ScienceLabI: "MODULE_SCIENCE_LAB_I",
  JumpDriveI: "MODULE_JUMP_DRIVE_I",
  JumpDriveIi: "MODULE_JUMP_DRIVE_II",
  JumpDriveIii: "MODULE_JUMP_DRIVE_III",
  WarpDriveI: "MODULE_WARP_DRIVE_I",
  WarpDriveIi: "MODULE_WARP_DRIVE_II",
  WarpDriveIii: "MODULE_WARP_DRIVE_III",
  ShieldGeneratorI: "MODULE_SHIELD_GENERATOR_I",
  ShieldGeneratorIi: "MODULE_SHIELD_GENERATOR_II",
} as const;

export type ShipModuleSymbolEnum =
  (typeof ShipModuleSymbolEnum)[keyof typeof ShipModuleSymbolEnum];

/**
 * A mount is installed on the exterier of a ship.
 * @export
 * @interface ShipMount
 */
export interface ShipMount {
  /**
   * Symbo of this mount.
   * @type {string}
   * @memberof ShipMount
   */
  symbol: ShipMountSymbolEnum;
  /**
   * Name of this mount.
   * @type {string}
   * @memberof ShipMount
   */
  name: string;
  /**
   * Description of this mount.
   * @type {string}
   * @memberof ShipMount
   */
  description?: string;
  /**
   * Mounts that have this value, such as mining lasers, denote how powerful this mount\'s capabilities are.
   * @type {number}
   * @memberof ShipMount
   */
  strength?: number;
  /**
   * Mounts that have this value denote what goods can be produced from using the mount.
   * @type {Array<string>}
   * @memberof ShipMount
   */
  deposits?: Array<ShipMountDepositsEnum>;
  /**
   *
   * @type {ShipRequirements}
   * @memberof ShipMount
   */
  requirements: ShipRequirements;
}

export const ShipMountSymbolEnum = {
  GasSiphonI: "MOUNT_GAS_SIPHON_I",
  GasSiphonIi: "MOUNT_GAS_SIPHON_II",
  GasSiphonIii: "MOUNT_GAS_SIPHON_III",
  SurveyorI: "MOUNT_SURVEYOR_I",
  SurveyorIi: "MOUNT_SURVEYOR_II",
  SurveyorIii: "MOUNT_SURVEYOR_III",
  SensorArrayI: "MOUNT_SENSOR_ARRAY_I",
  SensorArrayIi: "MOUNT_SENSOR_ARRAY_II",
  SensorArrayIii: "MOUNT_SENSOR_ARRAY_III",
  MiningLaserI: "MOUNT_MINING_LASER_I",
  MiningLaserIi: "MOUNT_MINING_LASER_II",
  MiningLaserIii: "MOUNT_MINING_LASER_III",
  LaserCannonI: "MOUNT_LASER_CANNON_I",
  MissileLauncherI: "MOUNT_MISSILE_LAUNCHER_I",
  TurretI: "MOUNT_TURRET_I",
} as const;

export type ShipMountSymbolEnum =
  (typeof ShipMountSymbolEnum)[keyof typeof ShipMountSymbolEnum];
export const ShipMountDepositsEnum = {
  QuartzSand: "QUARTZ_SAND",
  SiliconCrystals: "SILICON_CRYSTALS",
  PreciousStones: "PRECIOUS_STONES",
  IceWater: "ICE_WATER",
  AmmoniaIce: "AMMONIA_ICE",
  IronOre: "IRON_ORE",
  CopperOre: "COPPER_ORE",
  SilverOre: "SILVER_ORE",
  AluminumOre: "ALUMINUM_ORE",
  GoldOre: "GOLD_ORE",
  PlatinumOre: "PLATINUM_ORE",
  Diamonds: "DIAMONDS",
  UraniteOre: "URANITE_ORE",
  MeritiumOre: "MERITIUM_ORE",
} as const;

export type ShipMountDepositsEnum =
  (typeof ShipMountDepositsEnum)[keyof typeof ShipMountDepositsEnum];

/**
 * The navigation information of the ship.
 * @export
 * @interface ShipNav
 */
export interface ShipNav {
  /**
   * The symbol of the system.
   * @type {string}
   * @memberof ShipNav
   */
  systemSymbol: string;
  /**
   * The symbol of the waypoint.
   * @type {string}
   * @memberof ShipNav
   */
  waypointSymbol: string;
  /**
   *
   * @type {ShipNavRoute}
   * @memberof ShipNav
   */
  route: ShipNavRoute;
  /**
   *
   * @type {ShipNavStatus}
   * @memberof ShipNav
   */
  status: ShipNavStatus;
  /**
   *
   * @type {ShipNavFlightMode}
   * @memberof ShipNav
   */
  flightMode: ShipNavFlightMode;
}

/**
 * The ship\'s set speed when traveling between waypoints or systems.
 * @export
 * @enum {string}
 */

export const ShipNavFlightMode = {
  Drift: "DRIFT",
  Stealth: "STEALTH",
  Cruise: "CRUISE",
  Burn: "BURN",
} as const;

export type ShipNavFlightMode =
  (typeof ShipNavFlightMode)[keyof typeof ShipNavFlightMode];

/**
 * The routing information for the ship\'s most recent transit or current location.
 * @export
 * @interface ShipNavRoute
 */
export interface ShipNavRoute {
  /**
   *
   * @type {ShipNavRouteWaypoint}
   * @memberof ShipNavRoute
   */
  destination: ShipNavRouteWaypoint;
  /**
   *
   * @type {ShipNavRouteWaypoint}
   * @memberof ShipNavRoute
   */
  origin: ShipNavRouteWaypoint;
  /**
   * The date time of the ship\'s departure.
   * @type {string}
   * @memberof ShipNavRoute
   */
  departureTime: string;
  /**
   * The date time of the ship\'s arrival. If the ship is in-transit, this is the expected time of arrival.
   * @type {string}
   * @memberof ShipNavRoute
   */
  arrival: string;
}
/**
 * The destination or departure of a ships nav route.
 * @export
 * @interface ShipNavRouteWaypoint
 */
export interface ShipNavRouteWaypoint {
  /**
   * The symbol of the waypoint.
   * @type {string}
   * @memberof ShipNavRouteWaypoint
   */
  symbol: string;
  /**
   *
   * @type {WaypointType}
   * @memberof ShipNavRouteWaypoint
   */
  type: WaypointType;
  /**
   * The symbol of the system.
   * @type {string}
   * @memberof ShipNavRouteWaypoint
   */
  systemSymbol: string;
  /**
   * Position in the universe in the x axis.
   * @type {number}
   * @memberof ShipNavRouteWaypoint
   */
  x: number;
  /**
   * Position in the universe in the y axis.
   * @type {number}
   * @memberof ShipNavRouteWaypoint
   */
  y: number;
}

/**
 * The current status of the ship
 * @export
 * @enum {string}
 */

export const ShipNavStatus = {
  InTransit: "IN_TRANSIT",
  InOrbit: "IN_ORBIT",
  Docked: "DOCKED",
} as const;

export type ShipNavStatus = (typeof ShipNavStatus)[keyof typeof ShipNavStatus];

/**
 * The reactor of the ship. The reactor is responsible for powering the ship\'s systems and weapons.
 * @export
 * @interface ShipReactor
 */
export interface ShipReactor {
  /**
   * Symbol of the reactor.
   * @type {string}
   * @memberof ShipReactor
   */
  symbol: ShipReactorSymbolEnum;
  /**
   * Name of the reactor.
   * @type {string}
   * @memberof ShipReactor
   */
  name: string;
  /**
   * Description of the reactor.
   * @type {string}
   * @memberof ShipReactor
   */
  description: string;
  /**
   * The repairable condition of a component. A value of 0 indicates the component needs significant repairs, while a value of 1 indicates the component is in near perfect condition. As the condition of a component is repaired, the overall integrity of the component decreases.
   * @type {number}
   * @memberof ShipReactor
   */
  condition: number;
  /**
   * The overall integrity of the component, which determines the performance of the component. A value of 0 indicates that the component is almost completely degraded, while a value of 1 indicates that the component is in near perfect condition. The integrity of the component is non-repairable, and represents permanent wear over time.
   * @type {number}
   * @memberof ShipReactor
   */
  integrity: number;
  /**
   * The amount of power provided by this reactor. The more power a reactor provides to the ship, the lower the cooldown it gets when using a module or mount that taxes the ship\'s power.
   * @type {number}
   * @memberof ShipReactor
   */
  powerOutput: number;
  /**
   *
   * @type {ShipRequirements}
   * @memberof ShipReactor
   */
  requirements: ShipRequirements;
}

export const ShipReactorSymbolEnum = {
  SolarI: "REACTOR_SOLAR_I",
  FusionI: "REACTOR_FUSION_I",
  FissionI: "REACTOR_FISSION_I",
  ChemicalI: "REACTOR_CHEMICAL_I",
  AntimatterI: "REACTOR_ANTIMATTER_I",
} as const;

export type ShipReactorSymbolEnum =
  (typeof ShipReactorSymbolEnum)[keyof typeof ShipReactorSymbolEnum];

export const ShipRefineRequestProduceEnum = {
  Iron: "IRON",
  Copper: "COPPER",
  Silver: "SILVER",
  Gold: "GOLD",
  Aluminum: "ALUMINUM",
  Platinum: "PLATINUM",
  Uranite: "URANITE",
  Meritium: "MERITIUM",
  Fuel: "FUEL",
} as const;

export type ShipRefineRequestProduceEnum =
  (typeof ShipRefineRequestProduceEnum)[keyof typeof ShipRefineRequestProduceEnum];

/**
 * The public registration information of the ship
 * @export
 * @interface ShipRegistration
 */
export interface ShipRegistration {
  /**
   * The agent\'s registered name of the ship
   * @type {string}
   * @memberof ShipRegistration
   */
  name: string;
  /**
   * The symbol of the faction the ship is registered with
   * @type {string}
   * @memberof ShipRegistration
   */
  factionSymbol: string;
  /**
   *
   * @type {ShipRole}
   * @memberof ShipRegistration
   */
  role: ShipRole;
}

/**
 * The requirements for installation on a ship
 * @export
 * @interface ShipRequirements
 */
export interface ShipRequirements {
  /**
   * The amount of power required from the reactor.
   * @type {number}
   * @memberof ShipRequirements
   */
  power?: number;
  /**
   * The number of crew required for operation.
   * @type {number}
   * @memberof ShipRequirements
   */
  crew?: number;
  /**
   * The number of module slots required for installation.
   * @type {number}
   * @memberof ShipRequirements
   */
  slots?: number;
}
/**
 * The registered role of the ship
 * @export
 * @enum {string}
 */

export const ShipRole = {
  Fabricator: "FABRICATOR",
  Harvester: "HARVESTER",
  Hauler: "HAULER",
  Interceptor: "INTERCEPTOR",
  Excavator: "EXCAVATOR",
  Transport: "TRANSPORT",
  Repair: "REPAIR",
  Surveyor: "SURVEYOR",
  Command: "COMMAND",
  Carrier: "CARRIER",
  Patrol: "PATROL",
  Satellite: "SATELLITE",
  Explorer: "EXPLORER",
  Refinery: "REFINERY",
} as const;

export type ShipRole = (typeof ShipRole)[keyof typeof ShipRole];

/**
 * Type of ship
 * @export
 * @enum {string}
 */

export const ShipType = {
  Probe: "SHIP_PROBE",
  MiningDrone: "SHIP_MINING_DRONE",
  SiphonDrone: "SHIP_SIPHON_DRONE",
  Interceptor: "SHIP_INTERCEPTOR",
  LightHauler: "SHIP_LIGHT_HAULER",
  CommandFrigate: "SHIP_COMMAND_FRIGATE",
  Explorer: "SHIP_EXPLORER",
  HeavyFreighter: "SHIP_HEAVY_FREIGHTER",
  LightShuttle: "SHIP_LIGHT_SHUTTLE",
  OreHound: "SHIP_ORE_HOUND",
  RefiningFreighter: "SHIP_REFINING_FREIGHTER",
  Surveyor: "SHIP_SURVEYOR",
} as const;

export type ShipType = (typeof ShipType)[keyof typeof ShipType];

/**
 *
 * @export
 * @interface Shipyard
 */
export interface Shipyard {
  /**
   * The symbol of the shipyard. The symbol is the same as the waypoint where the shipyard is located.
   * @type {string}
   * @memberof Shipyard
   */
  symbol: string;
  /**
   * The list of ship types available for purchase at this shipyard.
   * @type {Array<ShipyardShipTypesInner>}
   * @memberof Shipyard
   */
  shipTypes: Array<ShipyardShipTypesInner>;
  /**
   * The list of recent transactions at this shipyard.
   * @type {Array<ShipyardTransaction>}
   * @memberof Shipyard
   */
  transactions?: Array<ShipyardTransaction>;
  /**
   * The ships that are currently available for purchase at the shipyard.
   * @type {Array<ShipyardShip>}
   * @memberof Shipyard
   */
  ships?: Array<ShipyardShip>;
  /**
   * The fee to modify a ship at this shipyard. This includes installing or removing modules and mounts on a ship. In the case of mounts, the fee is a flat rate per mount. In the case of modules, the fee is per slot the module occupies.
   * @type {number}
   * @memberof Shipyard
   */
  modificationsFee: number;
}
/**
 *
 * @export
 * @interface ShipyardShip
 */
export interface ShipyardShip {
  /**
   *
   * @type {ShipType}
   * @memberof ShipyardShip
   */
  type: ShipType;
  /**
   *
   * @type {string}
   * @memberof ShipyardShip
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof ShipyardShip
   */
  description: string;
  /**
   *
   * @type {SupplyLevel}
   * @memberof ShipyardShip
   */
  supply: SupplyLevel;
  /**
   *
   * @type {ActivityLevel}
   * @memberof ShipyardShip
   */
  activity?: ActivityLevel;
  /**
   *
   * @type {number}
   * @memberof ShipyardShip
   */
  purchasePrice: number;
  /**
   *
   * @type {ShipFrame}
   * @memberof ShipyardShip
   */
  frame: ShipFrame;
  /**
   *
   * @type {ShipReactor}
   * @memberof ShipyardShip
   */
  reactor: ShipReactor;
  /**
   *
   * @type {ShipEngine}
   * @memberof ShipyardShip
   */
  engine: ShipEngine;
  /**
   *
   * @type {Array<ShipModule>}
   * @memberof ShipyardShip
   */
  modules: Array<ShipModule>;
  /**
   *
   * @type {Array<ShipMount>}
   * @memberof ShipyardShip
   */
  mounts: Array<ShipMount>;
  /**
   *
   * @type {ShipyardShipCrew}
   * @memberof ShipyardShip
   */
  crew: ShipyardShipCrew;
}

/**
 *
 * @export
 * @interface ShipyardShipCrew
 */
export interface ShipyardShipCrew {
  /**
   *
   * @type {number}
   * @memberof ShipyardShipCrew
   */
  required: number;
  /**
   *
   * @type {number}
   * @memberof ShipyardShipCrew
   */
  capacity: number;
}
/**
 *
 * @export
 * @interface ShipyardShipTypesInner
 */
export interface ShipyardShipTypesInner {
  /**
   *
   * @type {ShipType}
   * @memberof ShipyardShipTypesInner
   */
  type: ShipType;
}

/**
 * Results of a transaction with a shipyard.
 * @export
 * @interface ShipyardTransaction
 */
export interface ShipyardTransaction {
  /**
   * The symbol of the waypoint.
   * @type {string}
   * @memberof ShipyardTransaction
   */
  waypointSymbol: string;
  /**
   * The symbol of the ship that was the subject of the transaction.
   * @type {string}
   * @memberof ShipyardTransaction
   * @deprecated
   */
  shipSymbol: string;
  /**
   * The symbol of the ship that was the subject of the transaction.
   * @type {string}
   * @memberof ShipyardTransaction
   */
  shipType: string;
  /**
   * The price of the transaction.
   * @type {number}
   * @memberof ShipyardTransaction
   */
  price: number;
  /**
   * The symbol of the agent that made the transaction.
   * @type {string}
   * @memberof ShipyardTransaction
   */
  agentSymbol: string;
  /**
   * The timestamp of the transaction.
   * @type {string}
   * @memberof ShipyardTransaction
   */
  timestamp: string;
}
/**
 * Siphon details.
 * @export
 * @interface Siphon
 */
export interface Siphon {
  /**
   * Symbol of the ship that executed the siphon.
   * @type {string}
   * @memberof Siphon
   */
  shipSymbol: string;
  /**
   *
   * @type {SiphonYield}
   * @memberof Siphon
   */
  yield: SiphonYield;
}

/**
 * A yield from the siphon operation.
 * @export
 * @interface SiphonYield
 */
export interface SiphonYield {
  /**
   *
   * @type {TradeSymbol}
   * @memberof SiphonYield
   */
  symbol: TradeSymbol;
  /**
   * The number of units siphoned that were placed into the ship\'s cargo hold.
   * @type {number}
   * @memberof SiphonYield
   */
  units: number;
}

/**
 * The supply level of a trade good.
 * @export
 * @enum {string}
 */

export const SupplyLevel = {
  Scarce: "SCARCE",
  Limited: "LIMITED",
  Moderate: "MODERATE",
  High: "HIGH",
  Abundant: "ABUNDANT",
} as const;

export type SupplyLevel = (typeof SupplyLevel)[keyof typeof SupplyLevel];

/**
 * A resource survey of a waypoint, detailing a specific extraction location and the types of resources that can be found there.
 * @export
 * @interface Survey
 */
export interface Survey {
  /**
   * A unique signature for the location of this survey. This signature is verified when attempting an extraction using this survey.
   * @type {string}
   * @memberof Survey
   */
  signature: string;
  /**
   * The symbol of the waypoint that this survey is for.
   * @type {string}
   * @memberof Survey
   */
  symbol: string;
  /**
   * A list of deposits that can be found at this location. A ship will extract one of these deposits when using this survey in an extraction request. If multiple deposits of the same type are present, the chance of extracting that deposit is increased.
   * @type {Array<SurveyDeposit>}
   * @memberof Survey
   */
  deposits: Array<SurveyDeposit>;
  /**
   * The date and time when the survey expires. After this date and time, the survey will no longer be available for extraction.
   * @type {string}
   * @memberof Survey
   */
  expiration: string;
  /**
   * The size of the deposit. This value indicates how much can be extracted from the survey before it is exhausted.
   * @type {string}
   * @memberof Survey
   */
  size: SurveySizeEnum;
}

export const SurveySizeEnum = {
  Small: "SMALL",
  Moderate: "MODERATE",
  Large: "LARGE",
} as const;

export type SurveySizeEnum =
  (typeof SurveySizeEnum)[keyof typeof SurveySizeEnum];

/**
 * A surveyed deposit of a mineral or resource available for extraction.
 * @export
 * @interface SurveyDeposit
 */
export interface SurveyDeposit {
  /**
   * The symbol of the deposit.
   * @type {string}
   * @memberof SurveyDeposit
   */
  symbol: string;
}
/**
 *
 * @export
 * @interface System
 */
export interface System {
  /**
   * The symbol of the system.
   * @type {string}
   * @memberof System
   */
  symbol: string;
  /**
   * The symbol of the sector.
   * @type {string}
   * @memberof System
   */
  sectorSymbol: string;
  /**
   *
   * @type {SystemType}
   * @memberof System
   */
  type: SystemType;
  /**
   * Relative position of the system in the sector in the x axis.
   * @type {number}
   * @memberof System
   */
  x: number;
  /**
   * Relative position of the system in the sector in the y axis.
   * @type {number}
   * @memberof System
   */
  y: number;
  /**
   * Waypoints in this system.
   * @type {Array<SystemWaypoint>}
   * @memberof System
   */
  waypoints: Array<SystemWaypoint>;
  /**
   * Factions that control this system.
   * @type {Array<SystemFaction>}
   * @memberof System
   */
  factions: Array<SystemFaction>;
}

/**
 *
 * @export
 * @interface SystemFaction
 */
export interface SystemFaction {
  /**
   *
   * @type {FactionSymbol}
   * @memberof SystemFaction
   */
  symbol: FactionSymbol;
}

/**
 * The type of system.
 * @export
 * @enum {string}
 */

export const SystemType = {
  NeutronStar: "NEUTRON_STAR",
  RedStar: "RED_STAR",
  OrangeStar: "ORANGE_STAR",
  BlueStar: "BLUE_STAR",
  YoungStar: "YOUNG_STAR",
  WhiteDwarf: "WHITE_DWARF",
  BlackHole: "BLACK_HOLE",
  Hypergiant: "HYPERGIANT",
  Nebula: "NEBULA",
  Unstable: "UNSTABLE",
} as const;

export type SystemType = (typeof SystemType)[keyof typeof SystemType];

/**
 *
 * @export
 * @interface SystemWaypoint
 */
export interface SystemWaypoint {
  /**
   * The symbol of the waypoint.
   * @type {string}
   * @memberof SystemWaypoint
   */
  symbol: string;
  /**
   *
   * @type {WaypointType}
   * @memberof SystemWaypoint
   */
  type: WaypointType;
  /**
   * Relative position of the waypoint on the system\'s x axis. This is not an absolute position in the universe.
   * @type {number}
   * @memberof SystemWaypoint
   */
  x: number;
  /**
   * Relative position of the waypoint on the system\'s y axis. This is not an absolute position in the universe.
   * @type {number}
   * @memberof SystemWaypoint
   */
  y: number;
  /**
   * Waypoints that orbit this waypoint.
   * @type {Array<WaypointOrbital>}
   * @memberof SystemWaypoint
   */
  orbitals: Array<WaypointOrbital>;
  /**
   * The symbol of the parent waypoint, if this waypoint is in orbit around another waypoint. Otherwise this value is undefined.
   * @type {string}
   * @memberof SystemWaypoint
   */
  orbits?: string;
}

/**
 * A good that can be traded for other goods or currency.
 * @export
 * @interface TradeGood
 */
export interface TradeGood {
  /**
   *
   * @type {TradeSymbol}
   * @memberof TradeGood
   */
  symbol: TradeSymbol;
  /**
   * The name of the good.
   * @type {string}
   * @memberof TradeGood
   */
  name: string;
  /**
   * The description of the good.
   * @type {string}
   * @memberof TradeGood
   */
  description: string;
}

/**
 * The good\'s symbol.
 * @export
 * @enum {string}
 */

export const TradeSymbol = {
  PreciousStones: "PRECIOUS_STONES",
  QuartzSand: "QUARTZ_SAND",
  SiliconCrystals: "SILICON_CRYSTALS",
  AmmoniaIce: "AMMONIA_ICE",
  LiquidHydrogen: "LIQUID_HYDROGEN",
  LiquidNitrogen: "LIQUID_NITROGEN",
  IceWater: "ICE_WATER",
  ExoticMatter: "EXOTIC_MATTER",
  AdvancedCircuitry: "ADVANCED_CIRCUITRY",
  GravitonEmitters: "GRAVITON_EMITTERS",
  Iron: "IRON",
  IronOre: "IRON_ORE",
  Copper: "COPPER",
  CopperOre: "COPPER_ORE",
  Aluminum: "ALUMINUM",
  AluminumOre: "ALUMINUM_ORE",
  Silver: "SILVER",
  SilverOre: "SILVER_ORE",
  Gold: "GOLD",
  GoldOre: "GOLD_ORE",
  Platinum: "PLATINUM",
  PlatinumOre: "PLATINUM_ORE",
  Diamonds: "DIAMONDS",
  Uranite: "URANITE",
  UraniteOre: "URANITE_ORE",
  Meritium: "MERITIUM",
  MeritiumOre: "MERITIUM_ORE",
  Hydrocarbon: "HYDROCARBON",
  Antimatter: "ANTIMATTER",
  FabMats: "FAB_MATS",
  Fertilizers: "FERTILIZERS",
  Fabrics: "FABRICS",
  Food: "FOOD",
  Jewelry: "JEWELRY",
  Machinery: "MACHINERY",
  Firearms: "FIREARMS",
  AssaultRifles: "ASSAULT_RIFLES",
  MilitaryEquipment: "MILITARY_EQUIPMENT",
  Explosives: "EXPLOSIVES",
  LabInstruments: "LAB_INSTRUMENTS",
  Ammunition: "AMMUNITION",
  Electronics: "ELECTRONICS",
  ShipPlating: "SHIP_PLATING",
  ShipParts: "SHIP_PARTS",
  Equipment: "EQUIPMENT",
  Fuel: "FUEL",
  Medicine: "MEDICINE",
  Drugs: "DRUGS",
  Clothing: "CLOTHING",
  Microprocessors: "MICROPROCESSORS",
  Plastics: "PLASTICS",
  Polynucleotides: "POLYNUCLEOTIDES",
  Biocomposites: "BIOCOMPOSITES",
  QuantumStabilizers: "QUANTUM_STABILIZERS",
  Nanobots: "NANOBOTS",
  AiMainframes: "AI_MAINFRAMES",
  QuantumDrives: "QUANTUM_DRIVES",
  RoboticDrones: "ROBOTIC_DRONES",
  CyberImplants: "CYBER_IMPLANTS",
  GeneTherapeutics: "GENE_THERAPEUTICS",
  NeuralChips: "NEURAL_CHIPS",
  MoodRegulators: "MOOD_REGULATORS",
  ViralAgents: "VIRAL_AGENTS",
  MicroFusionGenerators: "MICRO_FUSION_GENERATORS",
  Supergrains: "SUPERGRAINS",
  LaserRifles: "LASER_RIFLES",
  Holographics: "HOLOGRAPHICS",
  ShipSalvage: "SHIP_SALVAGE",
  RelicTech: "RELIC_TECH",
  NovelLifeforms: "NOVEL_LIFEFORMS",
  BotanicalSpecimens: "BOTANICAL_SPECIMENS",
  CulturalArtifacts: "CULTURAL_ARTIFACTS",
  FrameProbe: "FRAME_PROBE",
  FrameDrone: "FRAME_DRONE",
  FrameInterceptor: "FRAME_INTERCEPTOR",
  FrameRacer: "FRAME_RACER",
  FrameFighter: "FRAME_FIGHTER",
  FrameFrigate: "FRAME_FRIGATE",
  FrameShuttle: "FRAME_SHUTTLE",
  FrameExplorer: "FRAME_EXPLORER",
  FrameMiner: "FRAME_MINER",
  FrameLightFreighter: "FRAME_LIGHT_FREIGHTER",
  FrameHeavyFreighter: "FRAME_HEAVY_FREIGHTER",
  FrameTransport: "FRAME_TRANSPORT",
  FrameDestroyer: "FRAME_DESTROYER",
  FrameCruiser: "FRAME_CRUISER",
  FrameCarrier: "FRAME_CARRIER",
  ReactorSolarI: "REACTOR_SOLAR_I",
  ReactorFusionI: "REACTOR_FUSION_I",
  ReactorFissionI: "REACTOR_FISSION_I",
  ReactorChemicalI: "REACTOR_CHEMICAL_I",
  ReactorAntimatterI: "REACTOR_ANTIMATTER_I",
  EngineImpulseDriveI: "ENGINE_IMPULSE_DRIVE_I",
  EngineIonDriveI: "ENGINE_ION_DRIVE_I",
  EngineIonDriveIi: "ENGINE_ION_DRIVE_II",
  EngineHyperDriveI: "ENGINE_HYPER_DRIVE_I",
  ModuleMineralProcessorI: "MODULE_MINERAL_PROCESSOR_I",
  ModuleGasProcessorI: "MODULE_GAS_PROCESSOR_I",
  ModuleCargoHoldI: "MODULE_CARGO_HOLD_I",
  ModuleCargoHoldIi: "MODULE_CARGO_HOLD_II",
  ModuleCargoHoldIii: "MODULE_CARGO_HOLD_III",
  ModuleCrewQuartersI: "MODULE_CREW_QUARTERS_I",
  ModuleEnvoyQuartersI: "MODULE_ENVOY_QUARTERS_I",
  ModulePassengerCabinI: "MODULE_PASSENGER_CABIN_I",
  ModuleMicroRefineryI: "MODULE_MICRO_REFINERY_I",
  ModuleScienceLabI: "MODULE_SCIENCE_LAB_I",
  ModuleJumpDriveI: "MODULE_JUMP_DRIVE_I",
  ModuleJumpDriveIi: "MODULE_JUMP_DRIVE_II",
  ModuleJumpDriveIii: "MODULE_JUMP_DRIVE_III",
  ModuleWarpDriveI: "MODULE_WARP_DRIVE_I",
  ModuleWarpDriveIi: "MODULE_WARP_DRIVE_II",
  ModuleWarpDriveIii: "MODULE_WARP_DRIVE_III",
  ModuleShieldGeneratorI: "MODULE_SHIELD_GENERATOR_I",
  ModuleShieldGeneratorIi: "MODULE_SHIELD_GENERATOR_II",
  ModuleOreRefineryI: "MODULE_ORE_REFINERY_I",
  ModuleFuelRefineryI: "MODULE_FUEL_REFINERY_I",
  MountGasSiphonI: "MOUNT_GAS_SIPHON_I",
  MountGasSiphonIi: "MOUNT_GAS_SIPHON_II",
  MountGasSiphonIii: "MOUNT_GAS_SIPHON_III",
  MountSurveyorI: "MOUNT_SURVEYOR_I",
  MountSurveyorIi: "MOUNT_SURVEYOR_II",
  MountSurveyorIii: "MOUNT_SURVEYOR_III",
  MountSensorArrayI: "MOUNT_SENSOR_ARRAY_I",
  MountSensorArrayIi: "MOUNT_SENSOR_ARRAY_II",
  MountSensorArrayIii: "MOUNT_SENSOR_ARRAY_III",
  MountMiningLaserI: "MOUNT_MINING_LASER_I",
  MountMiningLaserIi: "MOUNT_MINING_LASER_II",
  MountMiningLaserIii: "MOUNT_MINING_LASER_III",
  MountLaserCannonI: "MOUNT_LASER_CANNON_I",
  MountMissileLauncherI: "MOUNT_MISSILE_LAUNCHER_I",
  MountTurretI: "MOUNT_TURRET_I",
  ShipProbe: "SHIP_PROBE",
  ShipMiningDrone: "SHIP_MINING_DRONE",
  ShipSiphonDrone: "SHIP_SIPHON_DRONE",
  ShipInterceptor: "SHIP_INTERCEPTOR",
  ShipLightHauler: "SHIP_LIGHT_HAULER",
  ShipCommandFrigate: "SHIP_COMMAND_FRIGATE",
  ShipExplorer: "SHIP_EXPLORER",
  ShipHeavyFreighter: "SHIP_HEAVY_FREIGHTER",
  ShipLightShuttle: "SHIP_LIGHT_SHUTTLE",
  ShipOreHound: "SHIP_ORE_HOUND",
  ShipRefiningFreighter: "SHIP_REFINING_FREIGHTER",
  ShipSurveyor: "SHIP_SURVEYOR",
} as const;

export type TradeSymbol = (typeof TradeSymbol)[keyof typeof TradeSymbol];
/**
 * A waypoint is a location that ships can travel to such as a Planet, Moon or Space Station.
 * @export
 * @interface Waypoint
 */
export interface Waypoint {
  /**
   * The symbol of the waypoint.
   * @type {string}
   * @memberof Waypoint
   */
  symbol: string;
  /**
   *
   * @type {WaypointType}
   * @memberof Waypoint
   */
  type: WaypointType;
  /**
   * The symbol of the system.
   * @type {string}
   * @memberof Waypoint
   */
  systemSymbol: string;
  /**
   * Relative position of the waypoint on the system\'s x axis. This is not an absolute position in the universe.
   * @type {number}
   * @memberof Waypoint
   */
  x: number;
  /**
   * Relative position of the waypoint on the system\'s y axis. This is not an absolute position in the universe.
   * @type {number}
   * @memberof Waypoint
   */
  y: number;
  /**
   * Waypoints that orbit this waypoint.
   * @type {Array<WaypointOrbital>}
   * @memberof Waypoint
   */
  orbitals: Array<WaypointOrbital>;
  /**
   * The symbol of the parent waypoint, if this waypoint is in orbit around another waypoint. Otherwise this value is undefined.
   * @type {string}
   * @memberof Waypoint
   */
  orbits?: string;
  /**
   *
   * @type {WaypointFaction}
   * @memberof Waypoint
   */
  faction?: WaypointFaction;
  /**
   * The traits of the waypoint.
   * @type {Array<WaypointTrait>}
   * @memberof Waypoint
   */
  traits: Array<WaypointTrait>;
  /**
   * The modifiers of the waypoint.
   * @type {Array<WaypointModifier>}
   * @memberof Waypoint
   */
  modifiers?: Array<WaypointModifier>;
  /**
   *
   * @type {Chart}
   * @memberof Waypoint
   */
  chart?: Chart;
  /**
   * True if the waypoint is under construction.
   * @type {boolean}
   * @memberof Waypoint
   */
  isUnderConstruction: boolean;
}

/**
 * The faction that controls the waypoint.
 * @export
 * @interface WaypointFaction
 */
export interface WaypointFaction {
  /**
   *
   * @type {FactionSymbol}
   * @memberof WaypointFaction
   */
  symbol: FactionSymbol;
}

/**
 *
 * @export
 * @interface WaypointModifier
 */
export interface WaypointModifier {
  /**
   *
   * @type {WaypointModifierSymbol}
   * @memberof WaypointModifier
   */
  symbol: WaypointModifierSymbol;
  /**
   * The name of the trait.
   * @type {string}
   * @memberof WaypointModifier
   */
  name: string;
  /**
   * A description of the trait.
   * @type {string}
   * @memberof WaypointModifier
   */
  description: string;
}

/**
 * The unique identifier of the modifier.
 * @export
 * @enum {string}
 */

export const WaypointModifierSymbol = {
  Stripped: "STRIPPED",
  Unstable: "UNSTABLE",
  RadiationLeak: "RADIATION_LEAK",
  CriticalLimit: "CRITICAL_LIMIT",
  CivilUnrest: "CIVIL_UNREST",
} as const;

export type WaypointModifierSymbol =
  (typeof WaypointModifierSymbol)[keyof typeof WaypointModifierSymbol];

/**
 * An orbital is another waypoint that orbits a parent waypoint.
 * @export
 * @interface WaypointOrbital
 */
export interface WaypointOrbital {
  /**
   * The symbol of the orbiting waypoint.
   * @type {string}
   * @memberof WaypointOrbital
   */
  symbol: string;
}
/**
 *
 * @export
 * @interface WaypointTrait
 */
export interface WaypointTrait {
  /**
   *
   * @type {WaypointTraitSymbol}
   * @memberof WaypointTrait
   */
  symbol: WaypointTraitSymbol;
  /**
   * The name of the trait.
   * @type {string}
   * @memberof WaypointTrait
   */
  name: string;
  /**
   * A description of the trait.
   * @type {string}
   * @memberof WaypointTrait
   */
  description: string;
}

/**
 * The unique identifier of the trait.
 * @export
 * @enum {string}
 */

export const WaypointTraitSymbol = {
  Uncharted: "UNCHARTED",
  UnderConstruction: "UNDER_CONSTRUCTION",
  Marketplace: "MARKETPLACE",
  Shipyard: "SHIPYARD",
  Outpost: "OUTPOST",
  ScatteredSettlements: "SCATTERED_SETTLEMENTS",
  SprawlingCities: "SPRAWLING_CITIES",
  MegaStructures: "MEGA_STRUCTURES",
  PirateBase: "PIRATE_BASE",
  Overcrowded: "OVERCROWDED",
  HighTech: "HIGH_TECH",
  Corrupt: "CORRUPT",
  Bureaucratic: "BUREAUCRATIC",
  TradingHub: "TRADING_HUB",
  Industrial: "INDUSTRIAL",
  BlackMarket: "BLACK_MARKET",
  ResearchFacility: "RESEARCH_FACILITY",
  MilitaryBase: "MILITARY_BASE",
  SurveillanceOutpost: "SURVEILLANCE_OUTPOST",
  ExplorationOutpost: "EXPLORATION_OUTPOST",
  MineralDeposits: "MINERAL_DEPOSITS",
  CommonMetalDeposits: "COMMON_METAL_DEPOSITS",
  PreciousMetalDeposits: "PRECIOUS_METAL_DEPOSITS",
  RareMetalDeposits: "RARE_METAL_DEPOSITS",
  MethanePools: "METHANE_POOLS",
  IceCrystals: "ICE_CRYSTALS",
  ExplosiveGases: "EXPLOSIVE_GASES",
  StrongMagnetosphere: "STRONG_MAGNETOSPHERE",
  VibrantAuroras: "VIBRANT_AURORAS",
  SaltFlats: "SALT_FLATS",
  Canyons: "CANYONS",
  PerpetualDaylight: "PERPETUAL_DAYLIGHT",
  PerpetualOvercast: "PERPETUAL_OVERCAST",
  DrySeabeds: "DRY_SEABEDS",
  MagmaSeas: "MAGMA_SEAS",
  Supervolcanoes: "SUPERVOLCANOES",
  AshClouds: "ASH_CLOUDS",
  VastRuins: "VAST_RUINS",
  MutatedFlora: "MUTATED_FLORA",
  Terraformed: "TERRAFORMED",
  ExtremeTemperatures: "EXTREME_TEMPERATURES",
  ExtremePressure: "EXTREME_PRESSURE",
  DiverseLife: "DIVERSE_LIFE",
  ScarceLife: "SCARCE_LIFE",
  Fossils: "FOSSILS",
  WeakGravity: "WEAK_GRAVITY",
  StrongGravity: "STRONG_GRAVITY",
  CrushingGravity: "CRUSHING_GRAVITY",
  ToxicAtmosphere: "TOXIC_ATMOSPHERE",
  CorrosiveAtmosphere: "CORROSIVE_ATMOSPHERE",
  BreathableAtmosphere: "BREATHABLE_ATMOSPHERE",
  ThinAtmosphere: "THIN_ATMOSPHERE",
  Jovian: "JOVIAN",
  Rocky: "ROCKY",
  Volcanic: "VOLCANIC",
  Frozen: "FROZEN",
  Swamp: "SWAMP",
  Barren: "BARREN",
  Temperate: "TEMPERATE",
  Jungle: "JUNGLE",
  Ocean: "OCEAN",
  Radioactive: "RADIOACTIVE",
  MicroGravityAnomalies: "MICRO_GRAVITY_ANOMALIES",
  DebrisCluster: "DEBRIS_CLUSTER",
  DeepCraters: "DEEP_CRATERS",
  ShallowCraters: "SHALLOW_CRATERS",
  UnstableComposition: "UNSTABLE_COMPOSITION",
  HollowedInterior: "HOLLOWED_INTERIOR",
  Stripped: "STRIPPED",
} as const;

export type WaypointTraitSymbol =
  (typeof WaypointTraitSymbol)[keyof typeof WaypointTraitSymbol];

/**
 * The type of waypoint.
 * @export
 * @enum {string}
 */

export const WaypointType = {
  Planet: "PLANET",
  GasGiant: "GAS_GIANT",
  Moon: "MOON",
  OrbitalStation: "ORBITAL_STATION",
  JumpGate: "JUMP_GATE",
  AsteroidField: "ASTEROID_FIELD",
  Asteroid: "ASTEROID",
  EngineeredAsteroid: "ENGINEERED_ASTEROID",
  AsteroidBase: "ASTEROID_BASE",
  Nebula: "NEBULA",
  DebrisField: "DEBRIS_FIELD",
  GravityWell: "GRAVITY_WELL",
  ArtificialGravityWell: "ARTIFICIAL_GRAVITY_WELL",
  FuelStation: "FUEL_STATION",
} as const;

export type WaypointType = (typeof WaypointType)[keyof typeof WaypointType];
